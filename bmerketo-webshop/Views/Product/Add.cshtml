@model CreateProductViewModel

@{
    ViewData["Title"] = "Create Product";
    var categories = await _categoryService.GetAllAsync();
    var tags = await _tagService.GetAllAsync();
}

<div class="product-creation-page">
    <div class="container">
        <div class="header">
            <h1>
                CREATE NEW PRODUCT
            </h1>
        </div>
        <form novalidate method="post" enctype="multipart/form-data" id="product-creation-form">
            <div class="error" asp-validation-summary="ModelOnly"></div>
            <div class="fields">
                <div class="group required">
                    <label asp-for="@Model.ArticleNumber">Article Number</label>
                    <input asp-for="@Model.ArticleNumber" />
                    <span class="error" asp-validation-for="@Model.ArticleNumber"></span>
                    <span class="error custom-error required">You must provide an article number.</span>
                </div>
                <div class="group required">
                    <label asp-for="@Model.Name">Product Name</label>
                    <input asp-for="@Model.Name" />
                    <span class="error" asp-validation-for="@Model.Name"></span>
                    <span class="error custom-error required">You must provide a product name.</span>
                </div>
                <div class="group required">
                    <label asp-for="@Model.Description">Description</label>
                    <input asp-for="@Model.Description" />
                    <span class="error" asp-validation-for="@Model.Description"></span>
                    <span class="error custom-error required">You must provide enter a description.</span>
                </div>
                <div class="group regex" data-regex="^[0-9]*$">
                    <label asp-for="@Model.OriginalPrice">Original Price (leave empty if product is not on sale)</label>
                    <input asp-for="@Model.OriginalPrice" />
                    <span class="error" asp-validation-for="@Model.OriginalPrice"></span>
                    <span class="error custom-error regex">Please enter only enter numbers.</span>
                </div>
                <div class="group required regex" data-regex="^[0-9]*$">
                    <label asp-for="@Model.CurrentPrice">Current Price</label>
                    <input asp-for="@Model.CurrentPrice" />
                    <span class="error" asp-validation-for="@Model.CurrentPrice"></span>
                    <span class="error custom-error required">You must enter the current price.</span>
                    <span class="error custom-error regex">Please enter only enter numbers.</span>
                </div>
                <div class="group required regex" data-regex="^[0-9]$|^[1-9][0-9]$|^(120)$">
                    <label asp-for="@Model.SalePercentage">Sale Percentage (Enter "0" if not on sale)</label>
                    <input asp-for="@Model.SalePercentage" />
                    <span class="error" asp-validation-for="@Model.SalePercentage"></span>
                    <span class="error custom-error required">You must enter the sale percentage.</span>
                    <span class="error custom-error regex">Please enter a number between 0-99.</span>
                </div>
                <div class="group required">
                    <label asp-for="@Model.Image">Product Image (Picture needs to be 537 x 576)</label>
                    <input class="file-upload" asp-for="@Model.Image" />
                    <span class="error" asp-validation-for="@Model.Image"></span>
                    <span class="error custom-error required">You must upload an image.</span>
                </div>
                <div class="group required-select">
                    <label asp-for="@Model.CategoryId">Category:</label>
                    <select asp-for="@Model.CategoryId">
                        <option value="" disabled selected>Select Category</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </select>
                    <span class="error" asp-validation-for="@Model.CategoryId"></span>
                    <span class="error custom-error required">You must choose a category.</span>
                </div>
                <div class="group">
                    <label class="tag-label" asp-for="@Model.TagIds">Tags:</label>
                    <div class="tags">
                        @foreach (var tag in tags)
                        {
                            <div class="tag">
                                <input type="checkbox" name="TagIds[]" value="@tag.Id" id="tag-@tag.Id" />
                                <label for="tag-@tag.Id">@tag.Name</label>
                            </div>
                        }
                    </div>
                    <span class="error" asp-validation-for="@Model.TagIds"></span>
                </div>
            </div>
            <div class="button-container">
                <button type="submit">UPDATE ACCOUNT</button>
            </div>
        </form>
    </div>
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            const allGroups = document.querySelectorAll(".group");
            const requiredGroups = document.querySelectorAll(".group.required");
            const requiredSelectGroups = document.querySelectorAll(".group.required-select");
            const regexGroups = document.querySelectorAll(".group.regex");
            const createProductForm = document.querySelector("#product-creation-form");

            createProductForm.addEventListener("submit", (e) => {
                e.preventDefault();
                let modelIsValid = true;

                requiredGroups.forEach(group => {
                    const input = group.querySelector("input");
                    const requiredSpan = group.querySelector(".custom-error.required");
                    if (input.value.trim() === "") {
                        requiredSpan.style.display = "block";
                        modelIsValid = false;
                    } else {
                        requiredSpan.style.display = "none";
                    }
                });

                requiredSelectGroups.forEach(group => {
                    const select = group.querySelector("select");
                    const requiredSpan = group.querySelector(".custom-error.required");

                    if (select.value.trim() === "") {
                        requiredSpan.style.display = "block";
                        modelIsValid = false;
                    } else {
                        requiredSpan.style.display = "none";
                    }
                });

                regexGroups.forEach(group => {
                    const input = group.querySelector("input");
                    const regexPattern = group.dataset.regex;
                    const regexErrorSpan = group.querySelector(".custom-error.regex");

                    if (input.value.trim() !== "" && !new RegExp(regexPattern).test(input.value)) {
                        regexErrorSpan.style.display = "block";
                        modelIsValid = false;
                    } else {
                        regexErrorSpan.style.display = "none";
                    }
                });

                if (modelIsValid) {
                    createProductForm.submit();
                }
            });

            allGroups.forEach(group => {
                const input = group.querySelector("input, textarea");
                const errorSpans = group.querySelectorAll(".error");

                input.addEventListener("input", () => {
                    errorSpans.forEach(span => {
                        span.style.display = "none";
                    });
                });
            });
        });
    </script>
</div>